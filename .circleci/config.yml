# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      #- restore_cache:
      #    keys:
      #    - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
      #    - v1-dependencies-

      - run:
          name: Install docker compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose

      - setup_remote_docker

      - run:
          name: Build production images
          command: docker-compose -f production.yml build

      - run:
          name: Start application
          command: docker-compose -f production.yml up -d

      - run:
          name: Test sleep to wait for postgres
          command: sleep 10

      - run:
          name: Run migrations
          command: docker-compose -f production.yml run web python manage.py migrate

      # - save_cache:
      #   paths:
      #     - ./venv
      #   key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: Run tests
          command: docker-compose -f production.yml run web python manage.py test

      - store_artifacts:
          path: test-reports
          destination: test-reports

      - run:
          name: Deploy to production server
          command: ssh -oStrictHostKeyChecking=no centos@trvlr.ch "cd ~/trckr/trckr-backend/ && git pull && docker-compose -f production.yml up -d --build"
